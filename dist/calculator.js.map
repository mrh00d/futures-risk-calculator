{
  "version": 3,
  "sources": ["../src/index.ts", "../src/constants.ts", "../src/calculations.ts", "../src/calculator.ts"],
  "sourcesContent": ["/**\n * ProfitPath Futures Trading Calculator\n * Main entry point\n */\n\nexport * from './types';\nexport * from './constants';\nexport * from './calculations';\nexport { riskCalculator } from './calculator';\n\n// Re-export for browser global\nimport { riskCalculator } from './calculator';\n\nif (typeof window !== 'undefined') {\n  (window as any).riskCalculator = riskCalculator;\n}", "/**\n * Constants and configurations for ProfitPath calculator\n */\n\nimport type { FuturesContract, PropFirmTarget } from './types';\n\n/**\n * Futures contracts configuration\n */\nexport const FUTURES_CONTRACTS: Record<string, FuturesContract> = {\n  // Micro contracts\n  MNQ: { \n    name: \"Micro E-mini Nasdaq-100\", \n    tickValue: 0.50, \n    pointValue: 2, \n    ticksPerPoint: 4, \n    defaultCommission: 1.35 \n  },\n  MES: { \n    name: \"Micro E-mini S&P 500\", \n    tickValue: 1.25, \n    pointValue: 5, \n    ticksPerPoint: 4, \n    defaultCommission: 1.35 \n  },\n  MYM: { \n    name: \"Micro E-mini Dow\", \n    tickValue: 0.50, \n    pointValue: 0.50, \n    ticksPerPoint: 1, \n    defaultCommission: 1.35 \n  },\n  M2K: { \n    name: \"Micro E-mini Russell 2000\", \n    tickValue: 0.50, \n    pointValue: 5, \n    ticksPerPoint: 10, \n    defaultCommission: 1.35 \n  },\n  MCL: { \n    name: \"Micro Crude Oil\", \n    tickValue: 1.00, \n    pointValue: 100, \n    ticksPerPoint: 100, \n    defaultCommission: 1.35 \n  },\n  MGC: { \n    name: \"Micro Gold\", \n    tickValue: 1.00, \n    pointValue: 10, \n    ticksPerPoint: 10, \n    defaultCommission: 1.35 \n  },\n  \n  // E-mini contracts\n  ES: { \n    name: \"E-mini S&P 500\", \n    tickValue: 12.50, \n    pointValue: 50, \n    ticksPerPoint: 4, \n    defaultCommission: 2.50 \n  },\n  NQ: { \n    name: \"E-mini Nasdaq-100\", \n    tickValue: 5.00, \n    pointValue: 20, \n    ticksPerPoint: 4, \n    defaultCommission: 2.50 \n  },\n  YM: { \n    name: \"E-mini Dow\", \n    tickValue: 5.00, \n    pointValue: 5, \n    ticksPerPoint: 1, \n    defaultCommission: 2.50 \n  },\n  RTY: { \n    name: \"E-mini Russell 2000\", \n    tickValue: 5.00, \n    pointValue: 50, \n    ticksPerPoint: 10, \n    defaultCommission: 2.50 \n  },\n  \n  // Full-size contracts\n  CL: { \n    name: \"Crude Oil\", \n    tickValue: 10.00, \n    pointValue: 1000, \n    ticksPerPoint: 100, \n    defaultCommission: 2.50 \n  },\n  GC: { \n    name: \"Gold\", \n    tickValue: 10.00, \n    pointValue: 100, \n    ticksPerPoint: 10, \n    defaultCommission: 2.50 \n  }\n};\n\n/**\n * Prop firm profit targets\n */\nexport const PROP_FIRM_TARGETS: Record<string, PropFirmTarget> = {\n  custom: { target: 6000, dailyLimit: 1100, maxDrawdown: 2000 },\n  \n  // TopStep\n  topstep_50k: { target: 3000, dailyLimit: 1100, maxDrawdown: 2000 },\n  topstep_100k: { target: 6000, dailyLimit: 2200, maxDrawdown: 3000 },\n  topstep_150k: { target: 9000, dailyLimit: 3300, maxDrawdown: 4500 },\n  \n  // Elite Trader Funding\n  elite_25k: { target: 1500, dailyLimit: 500, maxDrawdown: 1500 },\n  elite_50k: { target: 2750, dailyLimit: 1100, maxDrawdown: 2500 },\n  elite_100k: { target: 6000, dailyLimit: 2200, maxDrawdown: 3000 },\n  elite_150k: { target: 9000, dailyLimit: 3300, maxDrawdown: 4500 },\n  \n  // TakeProfit Trader\n  takeprofit_25k: { target: 1500, dailyLimit: 500, maxDrawdown: 1500 },\n  takeprofit_50k: { target: 3000, dailyLimit: 1100, maxDrawdown: 2000 },\n  takeprofit_100k: { target: 6000, dailyLimit: 2200, maxDrawdown: 3000 },\n  \n  // My Funded Futures\n  mff_25k: { target: 1250, dailyLimit: 375, maxDrawdown: 1500 },\n  mff_50k: { target: 2500, dailyLimit: 1100, maxDrawdown: 2500 },\n  mff_100k: { target: 5000, dailyLimit: 2200, maxDrawdown: 4000 },\n  mff_150k: { target: 7500, dailyLimit: 3300, maxDrawdown: 6000 },\n  \n  // BlueSky Trading\n  bluesky_25k: { target: 1500, dailyLimit: 500, maxDrawdown: 1500 },\n  bluesky_50k: { target: 3000, dailyLimit: 1100, maxDrawdown: 2500 },\n  bluesky_100k: { target: 6250, dailyLimit: 2200, maxDrawdown: 5000 }\n};\n\n/**\n * Default values for calculator inputs\n */\nexport const DEFAULT_VALUES = {\n  selectedContract: 'MNQ',\n  selectedPropFirm: 'custom',\n  winningTrades: 2,\n  losingTrades: 2,\n  ticksGained: 120,\n  ticksLost: 68,\n  numContracts: 1,\n  numAccounts: 1,\n  eaProfitTarget: 6000,\n  tradingDaysPerMonth: 21,\n  customDays: 235,\n  converterTicks: 0,\n  converterPoints: 0,\n  \n  // Target simulation defaults\n  useTargetSimulation: false,\n  target1Contracts: 0,\n  target1Points: 10,\n  target2Contracts: 0,\n  target2Points: 20,\n  target3Contracts: 0,\n  target3Points: 40,\n  \n  // Breakeven simulation defaults\n  useBreakevenStop: false,\n  breakevenTriggerPoints: 10,\n  breakevenWinRate: 0.30,\n  \n  // Sharing defaults\n  showShareModal: false,\n  shareURL: '',\n  copied: false\n};\n\n/**\n * Target preset configurations\n */\nexport const TARGET_PRESETS = {\n  conservative: {\n    name: 'Conservative',\n    description: '60% at 1R, 30% at 2R, 10% at 3R',\n    distribution: [0.6, 0.3, 0.1],\n    rMultiples: [1, 2, 3]\n  },\n  moderate: {\n    name: 'Moderate',\n    description: '40% at 1.5R, 40% at 2.5R, 20% at 4R',\n    distribution: [0.4, 0.4, 0.2],\n    rMultiples: [1.5, 2.5, 4]\n  },\n  aggressive: {\n    name: 'Aggressive',\n    description: '25% at 2R, 50% at 3R, 25% at 5R',\n    distribution: [0.25, 0.5, 0.25],\n    rMultiples: [2, 3, 5]\n  },\n  breakout: {\n    name: 'Breakout',\n    description: '33% at 3R, 33% at 5R, 34% at 8R',\n    distribution: [0.33, 0.33, 0.34],\n    rMultiples: [3, 5, 8]\n  }\n};\n\n/**\n * Breakeven configuration constants\n */\nexport const BREAKEVEN_CONFIG = {\n  DEFAULT_TRIGGER_POINTS: 10,\n  DEFAULT_WIN_RATE: 0.30,\n  TRADES_REACHING_BE_PERCENTAGE: 0.80\n};\n\n/**\n * URL parameter keys for sharing\n */\nexport const URL_PARAMS = {\n  CONTRACT: 'c',\n  PROP_FIRM: 'pf',\n  WINNING_TRADES: 'w',\n  LOSING_TRADES: 'l',\n  TICKS_GAINED: 'tg',\n  TICKS_LOST: 'tl',\n  NUM_CONTRACTS: 'nc',\n  NUM_ACCOUNTS: 'na',\n  PROFIT_TARGET: 'pt',\n  COMMISSION: 'cr',\n  USE_TARGET_SIM: 'uts',\n  TARGET1_CONTRACTS: 't1c',\n  TARGET1_POINTS: 't1p',\n  TARGET2_CONTRACTS: 't2c',\n  TARGET2_POINTS: 't2p',\n  TARGET3_CONTRACTS: 't3c',\n  TARGET3_POINTS: 't3p',\n  USE_BREAKEVEN: 'ubs',\n  BREAKEVEN_TRIGGER: 'btp',\n  BREAKEVEN_WIN_RATE: 'bwr'\n};", "/**\n * Financial calculation utilities for futures trading\n */\n\nimport type { FuturesContract } from './types';\n\n/**\n * Calculate the dollar value of ticks for a given contract\n */\nexport function calculateTickValue(\n  ticks: number, \n  contract: FuturesContract, \n  numContracts: number\n): number {\n  return ticks * contract.tickValue * numContracts;\n}\n\n/**\n * Convert points to ticks for a specific contract\n */\nexport function pointsToTicks(\n  points: number, \n  contract: FuturesContract\n): number {\n  return points * contract.ticksPerPoint;\n}\n\n/**\n * Convert ticks to points for a specific contract\n */\nexport function ticksToPoints(\n  ticks: number, \n  contract: FuturesContract\n): number {\n  return ticks / contract.ticksPerPoint;\n}\n\n/**\n * Calculate expectancy based on win rate and average win/loss amounts\n */\nexport function calculateExpectancy(\n  winRate: number,\n  avgWinAmount: number,\n  avgLossAmount: number,\n  commissionPerRT: number,\n  numContracts: number\n): number {\n  const winAmount = avgWinAmount - (commissionPerRT * numContracts);\n  const lossAmount = avgLossAmount + (commissionPerRT * numContracts);\n  const lossRate = 1 - winRate;\n  \n  return (winRate * winAmount) - (lossRate * lossAmount);\n}\n\n/**\n * Calculate R-value (Risk/Reward ratio)\n */\nexport function calculateRValue(\n  avgWinTicks: number,\n  avgLossTicks: number\n): number {\n  return avgLossTicks > 0 ? avgWinTicks / avgLossTicks : 0;\n}\n\n/**\n * Calculate breakeven-adjusted win rate\n */\nexport function calculateBreakevenAdjustedWinRate(\n  baseWinRate: number,\n  breakevenWinRate: number,\n  percentReachingBE: number = 0.8\n): number {\n  const tradesReachingBE = baseWinRate * percentReachingBE;\n  const tradesNotReachingBE = baseWinRate * (1 - percentReachingBE);\n  return tradesNotReachingBE + (tradesReachingBE * breakevenWinRate);\n}\n\n/**\n * Calculate weighted average exit points for multi-target strategies\n */\nexport function calculateWeightedAverageExit(\n  targets: Array<{ contracts: number; points: number }>,\n  totalContracts: number\n): number {\n  if (totalContracts === 0) return 0;\n  \n  let totalPoints = 0;\n  let contractsUsed = 0;\n  \n  for (const target of targets) {\n    if (contractsUsed >= totalContracts) break;\n    \n    const contracts = Math.min(target.contracts, totalContracts - contractsUsed);\n    totalPoints += contracts * target.points;\n    contractsUsed += contracts;\n  }\n  \n  return contractsUsed > 0 ? totalPoints / contractsUsed : 0;\n}\n\n/**\n * Calculate days to reach profit target\n */\nexport function calculateDaysToTarget(\n  targetAmount: number,\n  dailyProfit: number\n): number {\n  return dailyProfit > 0 ? targetAmount / dailyProfit : 0;\n}\n\n/**\n * Format currency values\n */\nexport function formatCurrency(amount: number): string {\n  const formatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  });\n  return formatter.format(amount);\n}\n\n/**\n * Format percentage values\n */\nexport function formatPercentage(value: number, decimals: number = 1): string {\n  return `${value.toFixed(decimals)}%`;\n}\n\n/**\n * Validate trading inputs\n */\nexport interface ValidationResult {\n  isValid: boolean;\n  errors: string[];\n}\n\nexport function validateTradingInputs(inputs: {\n  winningTrades: number;\n  losingTrades: number;\n  ticksGained: number;\n  ticksLost: number;\n  numContracts: number;\n  numAccounts: number;\n}): ValidationResult {\n  const errors: string[] = [];\n  \n  if (inputs.winningTrades < 0) {\n    errors.push('Winning trades must be non-negative');\n  }\n  \n  if (inputs.losingTrades < 0) {\n    errors.push('Losing trades must be non-negative');\n  }\n  \n  if (inputs.winningTrades + inputs.losingTrades === 0) {\n    errors.push('Total trades must be greater than zero');\n  }\n  \n  if (inputs.ticksGained < 0) {\n    errors.push('Ticks gained must be non-negative');\n  }\n  \n  if (inputs.ticksLost < 0) {\n    errors.push('Ticks lost must be non-negative');\n  }\n  \n  if (inputs.numContracts <= 0) {\n    errors.push('Number of contracts must be greater than zero');\n  }\n  \n  if (inputs.numAccounts <= 0) {\n    errors.push('Number of accounts must be greater than zero');\n  }\n  \n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n}", "import type { \n    RiskCalculatorComponent, \n    ContractSymbol, \n    Contracts, \n    PropFirmTargets, \n    PropFirmType,\n    FuturesContract \n} from './types';\n\n// Declare global html2canvas function\ndeclare global {\n    function html2canvas(element: Element, options?: any): Promise<HTMLCanvasElement>;\n}\n\n// Declare Alpine.js types for the component\ndeclare module 'alpinejs' {\n    interface Stores {\n        darkMode: {\n            on: boolean;\n            toggle(): void;\n            init(): void;\n        };\n    }\n}\n\n// Futures Trading Risk Management Calculator\nfunction riskCalculator(): RiskCalculatorComponent {\n    const component: RiskCalculatorComponent = {\n        // Futures contracts data with ticks per point\n        contracts: {\n            MNQ: { name: \"Micro E-mini Nasdaq-100\", tickValue: 0.50, pointValue: 2, ticksPerPoint: 4, defaultCommission: 1.35 },\n            ES: { name: \"E-mini S&P 500\", tickValue: 12.50, pointValue: 50, ticksPerPoint: 4, defaultCommission: 2.50 },\n            MES: { name: \"Micro E-mini S&P 500\", tickValue: 1.25, pointValue: 5, ticksPerPoint: 4, defaultCommission: 1.35 },\n            NQ: { name: \"E-mini Nasdaq-100\", tickValue: 5.00, pointValue: 20, ticksPerPoint: 4, defaultCommission: 2.50 },\n            YM: { name: \"E-mini Dow\", tickValue: 5.00, pointValue: 5, ticksPerPoint: 1, defaultCommission: 2.50 },\n            MYM: { name: \"Micro E-mini Dow\", tickValue: 0.50, pointValue: 0.50, ticksPerPoint: 1, defaultCommission: 1.35 },\n            RTY: { name: \"E-mini Russell 2000\", tickValue: 5.00, pointValue: 50, ticksPerPoint: 10, defaultCommission: 2.50 },\n            M2K: { name: \"Micro E-mini Russell 2000\", tickValue: 0.50, pointValue: 5, ticksPerPoint: 10, defaultCommission: 1.35 },\n            CL: { name: \"Crude Oil\", tickValue: 10.00, pointValue: 1000, ticksPerPoint: 100, defaultCommission: 2.50 },\n            MCL: { name: \"Micro Crude Oil\", tickValue: 1.00, pointValue: 100, ticksPerPoint: 100, defaultCommission: 1.35 },\n            GC: { name: \"Gold\", tickValue: 10.00, pointValue: 100, ticksPerPoint: 10, defaultCommission: 2.50 },\n            MGC: { name: \"Micro Gold\", tickValue: 1.00, pointValue: 10, ticksPerPoint: 10, defaultCommission: 1.35 }\n        } as Contracts,\n        \n        // Prop firm presets\n        propFirmTargets: {\n            custom: { target: 6000, dailyLimit: 1100, maxDrawdown: 2000 },\n            topstep_50k: { target: 3000, dailyLimit: 1100, maxDrawdown: 2000 },\n            topstep_100k: { target: 6000, dailyLimit: 2200, maxDrawdown: 3000 },\n            topstep_150k: { target: 9000, dailyLimit: 3300, maxDrawdown: 4500 },\n            elite_25k: { target: 1500, dailyLimit: 500, maxDrawdown: 1500 },\n            elite_50k: { target: 2750, dailyLimit: 1100, maxDrawdown: 2500 },\n            elite_100k: { target: 6000, dailyLimit: 2200, maxDrawdown: 3000 },\n            elite_150k: { target: 9000, dailyLimit: 3300, maxDrawdown: 4500 },\n            takeprofit_25k: { target: 1500, dailyLimit: 500, maxDrawdown: 1500 },\n            takeprofit_50k: { target: 3000, dailyLimit: 1100, maxDrawdown: 2000 },\n            takeprofit_100k: { target: 6000, dailyLimit: 2200, maxDrawdown: 3000 },\n            mff_25k: { target: 1250, dailyLimit: 375, maxDrawdown: 1500 },\n            mff_50k: { target: 2500, dailyLimit: 1100, maxDrawdown: 2500 },\n            mff_100k: { target: 5000, dailyLimit: 2200, maxDrawdown: 4000 },\n            mff_150k: { target: 7500, dailyLimit: 3300, maxDrawdown: 6000 },\n            bluesky_25k: { target: 1500, dailyLimit: 500, maxDrawdown: 1500 },\n            bluesky_50k: { target: 3000, dailyLimit: 1100, maxDrawdown: 2500 },\n            bluesky_100k: { target: 6250, dailyLimit: 2200, maxDrawdown: 5000 }\n        } as PropFirmTargets,\n        \n        // User inputs\n        selectedContract: 'MNQ' as ContractSymbol,\n        selectedPropFirm: 'custom' as PropFirmType,\n        winningTrades: 2,\n        losingTrades: 2,\n        ticksGained: 120,\n        ticksLost: 68,\n        numContracts: 1,\n        numAccounts: 1,\n        commissionPerRT: 1.35,\n        eaProfitTarget: 6000,\n        eaDailyLimit: 1100,\n        eaMaxDrawdown: 2000,\n        tradingDaysPerMonth: 21,\n        customDays: 235,\n        converterTicks: 0,\n        converterPoints: 0,\n        \n        // Target simulation\n        useTargetSimulation: false,\n        target1Contracts: 0,\n        target1Points: 10,\n        target2Contracts: 0,\n        target2Points: 20,\n        target3Contracts: 0,\n        target3Points: 40,\n        \n        // Breakeven simulation\n        useBreakevenStop: false,\n        breakevenTriggerPoints: 10,\n        breakevenWinRate: 0.30,\n        \n        // Sharing\n        showShareModal: false,\n        shareURL: '',\n        copied: false,\n        \n        // UI preferences\n        showDetailedView: false,\n        \n        // Initialize\n        init(this: RiskCalculatorComponent & { $watch: Function }): void {\n            // Ensure modal is closed on init\n            this.showShareModal = false;\n            this.copied = false;\n            \n            this.commissionPerRT = this.contracts[this.selectedContract].defaultCommission;\n            this.$watch('selectedContract', (value: ContractSymbol) => {\n                this.commissionPerRT = this.contracts[value].defaultCommission;\n            });\n            \n            // Load from URL if parameters exist\n            this.loadFromURL();\n        },\n        \n        // Update prop firm target\n        updatePropFirmTarget(): void {\n            if (this.selectedPropFirm !== 'custom') {\n                const propFirm = this.propFirmTargets[this.selectedPropFirm];\n                this.eaProfitTarget = propFirm.target;\n                this.eaDailyLimit = propFirm.dailyLimit;\n                this.eaMaxDrawdown = propFirm.maxDrawdown;\n            }\n        },\n        \n        // Basic calculated properties\n        get totalTrades(): number {\n            return this.winningTrades + this.losingTrades;\n        },\n        \n        get winLossPercent(): number {\n            return this.totalTrades > 0 ? Math.round((this.winningTrades / this.totalTrades) * 100) : 0;\n        },\n        \n        get winRate(): number {\n            return this.totalTrades > 0 ? this.winningTrades / this.totalTrades : 0;\n        },\n        \n        get contract(): FuturesContract {\n            return this.contracts[this.selectedContract];\n        },\n        \n        // Amount calculations\n        get avgWinAmount(): number {\n            const effectiveTicks = this.useTargetSimulation ? this.avgExitTicks : this.ticksGained;\n            return effectiveTicks * this.contract.tickValue * this.numContracts;\n        },\n        \n        get avgLossAmount(): number {\n            return this.ticksLost * this.contract.tickValue * this.numContracts;\n        },\n        \n        get maxTradeLoss(): number {\n            return this.avgLossAmount;\n        },\n        \n        get maxTradeGain(): number {\n            return this.avgWinAmount;\n        },\n        \n        // R:R calculations\n        get rValue(): number {\n            const effectiveTicks = this.useTargetSimulation ? this.avgExitTicks : this.ticksGained;\n            return this.ticksLost > 0 ? effectiveTicks / this.ticksLost : 0;\n        },\n        \n        get rRatio(): string {\n            return this.rValue.toFixed(2);\n        },\n        \n        // Expectancy calculation (accounts for win rate)\n        get expectancy(): number {\n            const winAmount = this.avgWinAmount - (this.commissionPerRT * this.numContracts);\n            const lossAmount = this.avgLossAmount + (this.commissionPerRT * this.numContracts);\n            const lossRate = 1 - this.winRate;\n            \n            return (this.winRate * winAmount) - (lossRate * lossAmount);\n        },\n        \n        get expectancyR(): number {\n            if (this.avgLossAmount === 0) return 0;\n            return this.expectancy / this.avgLossAmount;\n        },\n        \n        get expectancyPercent(): number {\n            if (this.avgLossAmount === 0) return 0;\n            return (this.expectancy / this.avgLossAmount) * 100;\n        },\n        \n        // Breakeven adjusted calculations\n        get breakevenAdjustedWinRate(): number {\n            if (!this.useBreakevenStop) return this.winRate;\n            \n            // Calculate percentage of trades reaching BE based on trigger points\n            // The further the BE trigger, the fewer trades reach it\n            const percentReachingBE = this.calculateBreakevenReachRate();\n            \n            const tradesReachingBE = this.winRate * percentReachingBE;\n            const tradesNotReachingBE = this.winRate * (1 - percentReachingBE);\n            const actualWins = tradesNotReachingBE + (tradesReachingBE * this.breakevenWinRate);\n            \n            return actualWins;\n        },\n        \n        get breakevenScratchRate(): number {\n            if (!this.useBreakevenStop) return 0;\n            \n            const percentReachingBE = this.calculateBreakevenReachRate();\n            const tradesReachingBE = this.winRate * percentReachingBE;\n            return tradesReachingBE * (1 - this.breakevenWinRate);\n        },\n        \n        // Calculate what percentage of winning trades reach the breakeven trigger\n        calculateBreakevenReachRate(): number {\n            // Convert trigger points to ticks for comparison\n            const triggerTicks = this.breakevenTriggerPoints * this.contract.ticksPerPoint;\n            const avgWinTicks = this.useTargetSimulation ? this.avgExitTicks : this.ticksGained;\n            \n            // If trigger is beyond average win, very few trades reach it\n            if (triggerTicks >= avgWinTicks) {\n                return 0.1; // Only 10% reach BE if trigger is at or beyond target\n            }\n            \n            // Calculate reach rate based on trigger distance\n            // The closer the trigger to entry (0), the more trades reach it\n            const reachRate = 1 - (triggerTicks / avgWinTicks);\n            \n            // Clamp between 0.1 and 0.95\n            return Math.max(0.1, Math.min(0.95, reachRate));\n        },\n        \n        get breakevenAdjustedExpectancy(): number {\n            if (!this.useBreakevenStop) return this.expectancy;\n            \n            const winAmount = this.avgWinAmount - (this.commissionPerRT * this.numContracts);\n            const lossAmount = this.avgLossAmount + (this.commissionPerRT * this.numContracts);\n            const scratchAmount = -(this.commissionPerRT * this.numContracts);\n            \n            const actualWinRate = this.breakevenAdjustedWinRate;\n            const scratchRate = this.breakevenScratchRate;\n            const lossRate = 1 - actualWinRate - scratchRate;\n            \n            return (actualWinRate * winAmount) + (scratchRate * scratchAmount) - (lossRate * lossAmount);\n        },\n        \n        // P&L calculations\n        get grossDailyGain(): number {\n            if (!this.useBreakevenStop) {\n                const totalWinAmount = this.avgWinAmount * this.winningTrades;\n                const totalLossAmount = this.avgLossAmount * this.losingTrades;\n                return totalWinAmount - totalLossAmount;\n            }\n            \n            // When using breakeven stops, calculate based on adjusted rates\n            const actualWins = this.breakevenAdjustedWinRate * this.totalTrades;\n            const actualLosses = (1 - this.breakevenAdjustedWinRate - this.breakevenScratchRate) * this.totalTrades;\n            \n            const totalWinAmount = this.avgWinAmount * actualWins;\n            const totalLossAmount = this.avgLossAmount * actualLosses;\n            return totalWinAmount - totalLossAmount;\n        },\n        \n        get totalCommissions(): number {\n            return this.commissionPerRT * this.totalTrades * this.numContracts * this.numAccounts;\n        },\n        \n        get netDailyGain(): number {\n            if (!this.useBreakevenStop) {\n                return this.grossDailyGain - (this.commissionPerRT * this.totalTrades * this.numContracts);\n            }\n            \n            // Use breakeven-adjusted expectancy * total trades for more accurate calculation\n            return this.breakevenAdjustedExpectancy * this.totalTrades;\n        },\n        \n        get grossDailyGainTotal(): number {\n            return this.grossDailyGain * this.numAccounts;\n        },\n        \n        get netDailyGainTotal(): number {\n            return this.netDailyGain * this.numAccounts;\n        },\n        \n        get daysToEATarget(): number {\n            return this.netDailyGain > 0 ? this.eaProfitTarget / this.netDailyGain : 0;\n        },\n        \n        get daysToEATargetAllAccounts(): number {\n            return this.netDailyGainTotal > 0 ? this.eaProfitTarget / this.netDailyGainTotal : 0;\n        },\n        \n        // Target simulation calculations\n        get totalTargetContracts(): number {\n            return this.target1Contracts + this.target2Contracts + this.target3Contracts;\n        },\n        \n        get avgExitPoints(): number {\n            if (!this.useTargetSimulation) {\n                return this.ticksGained / this.contract.ticksPerPoint;\n            }\n            \n            const actualContracts = Math.min(this.totalTargetContracts, this.numContracts);\n            if (actualContracts === 0) {\n                return this.ticksGained / this.contract.ticksPerPoint;\n            }\n            \n            let totalPoints = 0;\n            let contractsUsed = 0;\n            \n            if (this.target1Contracts > 0 && contractsUsed < this.numContracts) {\n                const contracts = Math.min(this.target1Contracts, this.numContracts - contractsUsed);\n                totalPoints += contracts * this.target1Points;\n                contractsUsed += contracts;\n            }\n            \n            if (this.target2Contracts > 0 && contractsUsed < this.numContracts) {\n                const contracts = Math.min(this.target2Contracts, this.numContracts - contractsUsed);\n                totalPoints += contracts * this.target2Points;\n                contractsUsed += contracts;\n            }\n            \n            if (this.target3Contracts > 0 && contractsUsed < this.numContracts) {\n                const contracts = Math.min(this.target3Contracts, this.numContracts - contractsUsed);\n                totalPoints += contracts * this.target3Points;\n                contractsUsed += contracts;\n            }\n            \n            return contractsUsed > 0 ? totalPoints / contractsUsed : this.ticksGained / this.contract.ticksPerPoint;\n        },\n        \n        get avgExitTicks(): number {\n            return this.avgExitPoints * this.contract.ticksPerPoint;\n        },\n        \n        get blendedRR(): number {\n            return this.ticksLost > 0 ? this.avgExitTicks / this.ticksLost : 0;\n        },\n        \n        // Risk Analysis calculations\n        get maxConsecutiveLosses(): number {\n            // Based on win rate, calculate probable consecutive losses\n            const lossRate = 1 - this.winRate;\n            if (lossRate <= 0) return 0;\n            \n            // 99% confidence level for consecutive losses\n            return Math.ceil(Math.log(0.01) / Math.log(lossRate));\n        },\n        \n        get maxDrawdownFromLosses(): number {\n            const drawdownPerAccount = this.maxConsecutiveLosses * this.maxTradeLoss;\n            const totalDrawdown = drawdownPerAccount * this.numAccounts;\n            \n            // Cap at daily limit if applicable\n            if (this.eaDailyLimit > 0) {\n                return Math.min(totalDrawdown, this.eaDailyLimit);\n            }\n            \n            return totalDrawdown;\n        },\n        \n        get tradesToDailyLimit(): number {\n            if (this.eaDailyLimit <= 0 || this.maxTradeLoss <= 0) return Infinity;\n            return Math.floor(this.eaDailyLimit / (this.maxTradeLoss + (this.commissionPerRT * this.numContracts)));\n        },\n        \n        get daysToBlowAccount(): number {\n            if (this.netDailyGainTotal >= 0) return Infinity;\n            \n            const dailyLoss = Math.abs(this.netDailyGainTotal);\n            return this.eaMaxDrawdown / dailyLoss;\n        },\n        \n        get riskOfRuin(): number {\n            // Risk of ruin calculation for prop firm account\n            if (this.winRate === 0 || this.rValue <= 0) return 1;\n            \n            const q = 1 - this.winRate;\n            const p = this.winRate;\n            const b = this.rValue;\n            \n            // Negative expectancy = certain ruin\n            if (this.expectancy <= 0) return 1;\n            \n            // Calculate based on number of losing trades to hit drawdown\n            const totalRisk = this.maxTradeLoss * this.numAccounts;\n            const tradesToRuin = Math.floor(this.eaMaxDrawdown / totalRisk);\n            \n            if (tradesToRuin <= 0) return 1;\n            \n            // Using the gambler's ruin formula\n            // When p*b > q (positive expectancy)\n            const ratio = q / (p * b);\n            if (ratio >= 1) return 1;\n            \n            const riskOfRuin = Math.pow(ratio, tradesToRuin);\n            \n            return Math.min(1, Math.max(0, riskOfRuin));\n        },\n        \n        get recommendedMaxContracts(): number {\n            // Based on 1% risk per trade of max drawdown\n            const onePercentRisk = this.eaMaxDrawdown * 0.01;\n            const maxLossPerContract = (this.ticksLost * this.contract.tickValue) + (2 * this.commissionPerRT); // Round trip commission\n            \n            return Math.max(1, Math.floor(onePercentRisk / maxLossPerContract));\n        },\n        \n        get isOversized(): boolean {\n            return this.numContracts > this.recommendedMaxContracts;\n        },\n        \n        // Setup target presets\n        setupTargets(style: 'conservative' | 'moderate' | 'aggressive'): void {\n            const total = this.numContracts;\n            if (total === 0) return;\n            \n            switch(style) {\n                case 'conservative':\n                    this.target1Contracts = Math.ceil(total * 0.6);\n                    this.target2Contracts = Math.floor(total * 0.3);\n                    this.target3Contracts = total - this.target1Contracts - this.target2Contracts;\n                    this.target1Points = Math.round((this.ticksLost / this.contract.ticksPerPoint) * 1);\n                    this.target2Points = Math.round((this.ticksLost / this.contract.ticksPerPoint) * 2);\n                    this.target3Points = Math.round((this.ticksLost / this.contract.ticksPerPoint) * 3);\n                    break;\n                    \n                case 'moderate':\n                    this.target1Contracts = Math.ceil(total * 0.4);\n                    this.target2Contracts = Math.ceil(total * 0.4);\n                    this.target3Contracts = total - this.target1Contracts - this.target2Contracts;\n                    this.target1Points = Math.round((this.ticksLost / this.contract.ticksPerPoint) * 1.5);\n                    this.target2Points = Math.round((this.ticksLost / this.contract.ticksPerPoint) * 2.5);\n                    this.target3Points = Math.round((this.ticksLost / this.contract.ticksPerPoint) * 4);\n                    break;\n                    \n                case 'aggressive':\n                    this.target1Contracts = Math.ceil(total * 0.2);\n                    this.target2Contracts = Math.floor(total * 0.3);\n                    this.target3Contracts = total - this.target1Contracts - this.target2Contracts;\n                    this.target1Points = Math.round((this.ticksLost / this.contract.ticksPerPoint) * 2);\n                    this.target2Points = Math.round((this.ticksLost / this.contract.ticksPerPoint) * 3);\n                    this.target3Points = Math.round((this.ticksLost / this.contract.ticksPerPoint) * 5);\n                    break;\n            }\n        },\n        \n        // URL Sharing functionality\n        shareAsURL(): void {\n            const params = new URLSearchParams({\n                c: this.selectedContract,\n                wt: this.winningTrades.toString(),\n                lt: this.losingTrades.toString(),\n                tg: this.ticksGained.toString(),\n                tl: this.ticksLost.toString(),\n                nc: this.numContracts.toString(),\n                na: this.numAccounts.toString(),\n                cr: this.commissionPerRT.toString(),\n                pf: this.selectedPropFirm,\n                pt: this.eaProfitTarget.toString(),\n                cd: this.customDays.toString(),\n                ts: this.useTargetSimulation ? '1' : '0',\n                t1c: this.target1Contracts.toString(),\n                t1p: this.target1Points.toString(),\n                t2c: this.target2Contracts.toString(),\n                t2p: this.target2Points.toString(),\n                t3c: this.target3Contracts.toString(),\n                t3p: this.target3Points.toString(),\n                bes: this.useBreakevenStop ? '1' : '0',\n                btp: this.breakevenTriggerPoints.toString(),\n                bwr: this.breakevenWinRate.toString(),\n                dv: this.showDetailedView ? '1' : '0'\n            });\n            \n            this.shareURL = window.location.origin + window.location.pathname + '?' + params.toString();\n            this.showShareModal = true;\n            this.copied = false;\n        },\n        \n        async copyShareURL(): Promise<void> {\n            try {\n                await navigator.clipboard.writeText(this.shareURL);\n                this.copied = true;\n                setTimeout(() => { this.copied = false; }, 2000);\n            } catch (error) {\n                console.error('Failed to copy URL:', error);\n            }\n        },\n        \n        loadFromURL(): void {\n            const params = new URLSearchParams(window.location.search);\n            \n            if (params.has('c')) {\n                this.selectedContract = (params.get('c') || 'MNQ') as ContractSymbol;\n                this.winningTrades = parseInt(params.get('wt') || '2');\n                this.losingTrades = parseInt(params.get('lt') || '2');\n                this.ticksGained = parseInt(params.get('tg') || '120');\n                this.ticksLost = parseInt(params.get('tl') || '68');\n                this.numContracts = parseInt(params.get('nc') || '1');\n                this.numAccounts = parseInt(params.get('na') || '1');\n                this.commissionPerRT = parseFloat(params.get('cr') || this.contracts[this.selectedContract].defaultCommission.toString());\n                this.selectedPropFirm = (params.get('pf') || 'custom') as PropFirmType;\n                this.eaProfitTarget = parseInt(params.get('pt') || '6000');\n                this.customDays = parseInt(params.get('cd') || '235');\n                \n                this.useTargetSimulation = params.get('ts') === '1';\n                this.target1Contracts = parseInt(params.get('t1c') || '0');\n                this.target1Points = parseInt(params.get('t1p') || '10');\n                this.target2Contracts = parseInt(params.get('t2c') || '0');\n                this.target2Points = parseInt(params.get('t2p') || '20');\n                this.target3Contracts = parseInt(params.get('t3c') || '0');\n                this.target3Points = parseInt(params.get('t3p') || '40');\n                \n                this.useBreakevenStop = params.get('bes') === '1';\n                this.breakevenTriggerPoints = parseInt(params.get('btp') || '10');\n                this.breakevenWinRate = parseFloat(params.get('bwr') || '0.30');\n                \n                this.showDetailedView = params.get('dv') === '1';\n            }\n        },\n        \n        // Save as image functionality\n        async saveAsImage(): Promise<void> {\n            const button = (event?.target as HTMLElement)?.closest('button');\n            if (!button) return;\n            \n            const originalText = button.innerHTML;\n            button.innerHTML = 'Generating...';\n            button.disabled = true;\n            \n            const allButtons = document.querySelectorAll('button');\n            \n            try {\n                allButtons.forEach((btn: Element) => (btn as HTMLElement).style.display = 'none');\n                \n                const element = document.querySelector('.max-w-7xl');\n                if (!element) throw new Error('Content element not found');\n                \n                const isDarkMode = document.documentElement.classList.contains('dark');\n                const canvas = await html2canvas(element, {\n                    backgroundColor: isDarkMode ? '#111827' : '#f3f4f6',\n                    scale: 2,\n                    logging: false,\n                    useCORS: true,\n                    allowTaint: true,\n                    onclone: (clonedDoc: Document) => {\n                        if (isDarkMode) {\n                            clonedDoc.documentElement.classList.add('dark');\n                            const clonedElement = clonedDoc.querySelector('.max-w-7xl') as HTMLElement;\n                            if (clonedElement) {\n                                clonedElement.style.backgroundColor = '#111827';\n                                clonedElement.style.color = '#f3f4f6';\n                            }\n                        }\n                    }\n                });\n                \n                allButtons.forEach((btn: Element) => (btn as HTMLElement).style.display = '');\n                \n                // Add watermark\n                const ctx = canvas.getContext('2d');\n                if (ctx) {\n                    ctx.font = '14px Arial';\n                    ctx.fillStyle = 'rgba(0, 169, 232, 0.6)';\n                    ctx.textAlign = 'right';\n                    ctx.fillText('Created with ProfitPath by ProfitPros', canvas.width - 20, canvas.height - 20);\n                }\n\n                const link = document.createElement('a');\n                link.download = `profitpath-${this.selectedContract}-${new Date().toISOString().split('T')[0]}.png`;\n                link.href = canvas.toDataURL();\n                link.click();\n                \n                button.innerHTML = originalText;\n                button.disabled = false;\n            } catch (error) {\n                console.error('Error saving image:', error);\n                alert('Error saving image. Please try again.');\n                button.innerHTML = originalText;\n                button.disabled = false;\n                allButtons.forEach((btn: Element) => (btn as HTMLElement).style.display = '');\n            }\n        }\n    };\n    \n    return component;\n}\n\n// Export for use in browser\nexport { riskCalculator };\n(window as any).riskCalculator = riskCalculator;"],
  "mappings": "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",
  "names": ["totalWinAmount", "totalLossAmount"]
}
