{
  "version": 3,
  "sources": ["../src/index.ts", "../src/constants.ts", "../src/calculations.ts", "../src/calculator.ts"],
  "sourcesContent": ["/**\n * ProfitPath Futures Trading Calculator\n * Main entry point\n */\n\nexport * from './types';\nexport * from './constants';\nexport * from './calculations';\nexport { riskCalculator } from './calculator';\n\n// Re-export for browser global\nimport { riskCalculator } from './calculator';\n\nif (typeof window !== 'undefined') {\n  (window as any).riskCalculator = riskCalculator;\n}", "/**\n * Constants and configurations for ProfitPath calculator\n */\n\nimport type { FuturesContract, PropFirmTarget } from './types';\n\n/**\n * Futures contracts configuration\n */\nexport const FUTURES_CONTRACTS: Record<string, FuturesContract> = {\n  // Micro contracts\n  MNQ: { \n    name: \"Micro E-mini Nasdaq-100\", \n    tickValue: 0.50, \n    pointValue: 2, \n    ticksPerPoint: 4, \n    defaultCommission: 1.35 \n  },\n  MES: { \n    name: \"Micro E-mini S&P 500\", \n    tickValue: 1.25, \n    pointValue: 5, \n    ticksPerPoint: 4, \n    defaultCommission: 1.35 \n  },\n  MYM: { \n    name: \"Micro E-mini Dow\", \n    tickValue: 0.50, \n    pointValue: 0.50, \n    ticksPerPoint: 1, \n    defaultCommission: 1.35 \n  },\n  M2K: { \n    name: \"Micro E-mini Russell 2000\", \n    tickValue: 0.50, \n    pointValue: 5, \n    ticksPerPoint: 10, \n    defaultCommission: 1.35 \n  },\n  MCL: { \n    name: \"Micro Crude Oil\", \n    tickValue: 1.00, \n    pointValue: 100, \n    ticksPerPoint: 100, \n    defaultCommission: 1.35 \n  },\n  MGC: { \n    name: \"Micro Gold\", \n    tickValue: 1.00, \n    pointValue: 10, \n    ticksPerPoint: 10, \n    defaultCommission: 1.35 \n  },\n  \n  // E-mini contracts\n  ES: { \n    name: \"E-mini S&P 500\", \n    tickValue: 12.50, \n    pointValue: 50, \n    ticksPerPoint: 4, \n    defaultCommission: 2.50 \n  },\n  NQ: { \n    name: \"E-mini Nasdaq-100\", \n    tickValue: 5.00, \n    pointValue: 20, \n    ticksPerPoint: 4, \n    defaultCommission: 2.50 \n  },\n  YM: { \n    name: \"E-mini Dow\", \n    tickValue: 5.00, \n    pointValue: 5, \n    ticksPerPoint: 1, \n    defaultCommission: 2.50 \n  },\n  RTY: { \n    name: \"E-mini Russell 2000\", \n    tickValue: 5.00, \n    pointValue: 50, \n    ticksPerPoint: 10, \n    defaultCommission: 2.50 \n  },\n  \n  // Full-size contracts\n  CL: { \n    name: \"Crude Oil\", \n    tickValue: 10.00, \n    pointValue: 1000, \n    ticksPerPoint: 100, \n    defaultCommission: 2.50 \n  },\n  GC: { \n    name: \"Gold\", \n    tickValue: 10.00, \n    pointValue: 100, \n    ticksPerPoint: 10, \n    defaultCommission: 2.50 \n  }\n};\n\n/**\n * Prop firm profit targets\n */\nexport const PROP_FIRM_TARGETS: Record<string, PropFirmTarget> = {\n  custom: { target: 6000, dailyLimit: 1100, maxDrawdown: 2000 },\n  \n  // TopStep\n  topstep_50k: { target: 3000, dailyLimit: 1100, maxDrawdown: 2000 },\n  topstep_100k: { target: 6000, dailyLimit: 2200, maxDrawdown: 3000 },\n  topstep_150k: { target: 9000, dailyLimit: 3300, maxDrawdown: 4500 },\n  \n  // Elite Trader Funding\n  elite_25k: { target: 1500, dailyLimit: 500, maxDrawdown: 1500 },\n  elite_50k: { target: 2750, dailyLimit: 1100, maxDrawdown: 2500 },\n  elite_100k: { target: 6000, dailyLimit: 2200, maxDrawdown: 3000 },\n  elite_150k: { target: 9000, dailyLimit: 3300, maxDrawdown: 4500 },\n  \n  // TakeProfit Trader\n  takeprofit_25k: { target: 1500, dailyLimit: 500, maxDrawdown: 1500 },\n  takeprofit_50k: { target: 3000, dailyLimit: 1100, maxDrawdown: 2000 },\n  takeprofit_100k: { target: 6000, dailyLimit: 2200, maxDrawdown: 3000 },\n  \n  // My Funded Futures\n  mff_25k: { target: 1250, dailyLimit: 375, maxDrawdown: 1500 },\n  mff_50k: { target: 2500, dailyLimit: 1100, maxDrawdown: 2500 },\n  mff_100k: { target: 5000, dailyLimit: 2200, maxDrawdown: 4000 },\n  mff_150k: { target: 7500, dailyLimit: 3300, maxDrawdown: 6000 },\n  \n  // BlueSky Trading\n  bluesky_25k: { target: 1500, dailyLimit: 500, maxDrawdown: 1500 },\n  bluesky_50k: { target: 3000, dailyLimit: 1100, maxDrawdown: 2500 },\n  bluesky_100k: { target: 6250, dailyLimit: 2200, maxDrawdown: 5000 }\n};\n\n/**\n * Default values for calculator inputs\n */\nexport const DEFAULT_VALUES = {\n  selectedContract: 'MNQ',\n  selectedPropFirm: 'custom',\n  winningTrades: 2,\n  losingTrades: 2,\n  ticksGained: 120,\n  ticksLost: 68,\n  numContracts: 1,\n  numAccounts: 1,\n  eaProfitTarget: 6000,\n  tradingDaysPerMonth: 21,\n  customDays: 235,\n  converterTicks: 0,\n  converterPoints: 0,\n  \n  // Target simulation defaults\n  useTargetSimulation: false,\n  target1Contracts: 0,\n  target1Points: 10,\n  target2Contracts: 0,\n  target2Points: 20,\n  target3Contracts: 0,\n  target3Points: 40,\n  \n  // Breakeven simulation defaults\n  useBreakevenStop: false,\n  breakevenTriggerPoints: 10,\n  breakevenWinRate: 0.30,\n  \n  // Sharing defaults\n  showShareModal: false,\n  shareURL: '',\n  copied: false\n};\n\n/**\n * Target preset configurations\n */\nexport const TARGET_PRESETS = {\n  conservative: {\n    name: 'Conservative',\n    description: '60% at 1R, 30% at 2R, 10% at 3R',\n    distribution: [0.6, 0.3, 0.1],\n    rMultiples: [1, 2, 3]\n  },\n  moderate: {\n    name: 'Moderate',\n    description: '40% at 1.5R, 40% at 2.5R, 20% at 4R',\n    distribution: [0.4, 0.4, 0.2],\n    rMultiples: [1.5, 2.5, 4]\n  },\n  aggressive: {\n    name: 'Aggressive',\n    description: '25% at 2R, 50% at 3R, 25% at 5R',\n    distribution: [0.25, 0.5, 0.25],\n    rMultiples: [2, 3, 5]\n  },\n  breakout: {\n    name: 'Breakout',\n    description: '33% at 3R, 33% at 5R, 34% at 8R',\n    distribution: [0.33, 0.33, 0.34],\n    rMultiples: [3, 5, 8]\n  }\n};\n\n/**\n * Breakeven configuration constants\n */\nexport const BREAKEVEN_CONFIG = {\n  DEFAULT_TRIGGER_POINTS: 10,\n  DEFAULT_WIN_RATE: 0.30,\n  TRADES_REACHING_BE_PERCENTAGE: 0.80\n};\n\n/**\n * URL parameter keys for sharing\n */\nexport const URL_PARAMS = {\n  CONTRACT: 'c',\n  PROP_FIRM: 'pf',\n  WINNING_TRADES: 'w',\n  LOSING_TRADES: 'l',\n  TICKS_GAINED: 'tg',\n  TICKS_LOST: 'tl',\n  NUM_CONTRACTS: 'nc',\n  NUM_ACCOUNTS: 'na',\n  PROFIT_TARGET: 'pt',\n  COMMISSION: 'cr',\n  USE_TARGET_SIM: 'uts',\n  TARGET1_CONTRACTS: 't1c',\n  TARGET1_POINTS: 't1p',\n  TARGET2_CONTRACTS: 't2c',\n  TARGET2_POINTS: 't2p',\n  TARGET3_CONTRACTS: 't3c',\n  TARGET3_POINTS: 't3p',\n  USE_BREAKEVEN: 'ubs',\n  BREAKEVEN_TRIGGER: 'btp',\n  BREAKEVEN_WIN_RATE: 'bwr'\n};", "/**\n * Financial calculation utilities for futures trading\n */\n\nimport type { FuturesContract } from './types';\n\n/**\n * Calculate the dollar value of ticks for a given contract\n */\nexport function calculateTickValue(\n  ticks: number, \n  contract: FuturesContract, \n  numContracts: number\n): number {\n  return ticks * contract.tickValue * numContracts;\n}\n\n/**\n * Convert points to ticks for a specific contract\n */\nexport function pointsToTicks(\n  points: number, \n  contract: FuturesContract\n): number {\n  return points * contract.ticksPerPoint;\n}\n\n/**\n * Convert ticks to points for a specific contract\n */\nexport function ticksToPoints(\n  ticks: number, \n  contract: FuturesContract\n): number {\n  return ticks / contract.ticksPerPoint;\n}\n\n/**\n * Calculate expectancy based on win rate and average win/loss amounts\n */\nexport function calculateExpectancy(\n  winRate: number,\n  avgWinAmount: number,\n  avgLossAmount: number,\n  commissionPerRT: number,\n  numContracts: number\n): number {\n  const winAmount = avgWinAmount - (commissionPerRT * numContracts);\n  const lossAmount = avgLossAmount + (commissionPerRT * numContracts);\n  const lossRate = 1 - winRate;\n  \n  return (winRate * winAmount) - (lossRate * lossAmount);\n}\n\n/**\n * Calculate R-value (Risk/Reward ratio)\n */\nexport function calculateRValue(\n  avgWinTicks: number,\n  avgLossTicks: number\n): number {\n  return avgLossTicks > 0 ? avgWinTicks / avgLossTicks : 0;\n}\n\n/**\n * Calculate breakeven-adjusted win rate\n */\nexport function calculateBreakevenAdjustedWinRate(\n  baseWinRate: number,\n  breakevenWinRate: number,\n  percentReachingBE: number = 0.8\n): number {\n  const tradesReachingBE = baseWinRate * percentReachingBE;\n  const tradesNotReachingBE = baseWinRate * (1 - percentReachingBE);\n  return tradesNotReachingBE + (tradesReachingBE * breakevenWinRate);\n}\n\n/**\n * Calculate weighted average exit points for multi-target strategies\n */\nexport function calculateWeightedAverageExit(\n  targets: Array<{ contracts: number; points: number }>,\n  totalContracts: number\n): number {\n  if (totalContracts === 0) return 0;\n  \n  let totalPoints = 0;\n  let contractsUsed = 0;\n  \n  for (const target of targets) {\n    if (contractsUsed >= totalContracts) break;\n    \n    const contracts = Math.min(target.contracts, totalContracts - contractsUsed);\n    totalPoints += contracts * target.points;\n    contractsUsed += contracts;\n  }\n  \n  return contractsUsed > 0 ? totalPoints / contractsUsed : 0;\n}\n\n/**\n * Calculate days to reach profit target\n */\nexport function calculateDaysToTarget(\n  targetAmount: number,\n  dailyProfit: number\n): number {\n  return dailyProfit > 0 ? targetAmount / dailyProfit : 0;\n}\n\n/**\n * Format currency values\n */\nexport function formatCurrency(amount: number): string {\n  const formatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  });\n  return formatter.format(amount);\n}\n\n/**\n * Format percentage values\n */\nexport function formatPercentage(value: number, decimals: number = 1): string {\n  return `${value.toFixed(decimals)}%`;\n}\n\n/**\n * Validate trading inputs\n */\nexport interface ValidationResult {\n  isValid: boolean;\n  errors: string[];\n}\n\nexport function validateTradingInputs(inputs: {\n  winningTrades: number;\n  losingTrades: number;\n  ticksGained: number;\n  ticksLost: number;\n  numContracts: number;\n  numAccounts: number;\n}): ValidationResult {\n  const errors: string[] = [];\n  \n  if (inputs.winningTrades < 0) {\n    errors.push('Winning trades must be non-negative');\n  }\n  \n  if (inputs.losingTrades < 0) {\n    errors.push('Losing trades must be non-negative');\n  }\n  \n  if (inputs.winningTrades + inputs.losingTrades === 0) {\n    errors.push('Total trades must be greater than zero');\n  }\n  \n  if (inputs.ticksGained < 0) {\n    errors.push('Ticks gained must be non-negative');\n  }\n  \n  if (inputs.ticksLost < 0) {\n    errors.push('Ticks lost must be non-negative');\n  }\n  \n  if (inputs.numContracts <= 0) {\n    errors.push('Number of contracts must be greater than zero');\n  }\n  \n  if (inputs.numAccounts <= 0) {\n    errors.push('Number of accounts must be greater than zero');\n  }\n  \n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n}", "import type { \n    RiskCalculatorComponent, \n    ContractSymbol, \n    Contracts, \n    PropFirmTargets, \n    PropFirmType,\n    FuturesContract \n} from './types';\n\n// Declare global html2canvas function\ndeclare global {\n    function html2canvas(element: Element, options?: any): Promise<HTMLCanvasElement>;\n}\n\n// Declare Alpine.js types for the component\ndeclare module 'alpinejs' {\n    interface Stores {\n        darkMode: {\n            on: boolean;\n            toggle(): void;\n            init(): void;\n        };\n    }\n}\n\n// Futures Trading Risk Management Calculator\nfunction riskCalculator(): RiskCalculatorComponent {\n    const component: RiskCalculatorComponent = {\n        // Futures contracts data with ticks per point\n        contracts: {\n            MNQ: { name: \"Micro E-mini Nasdaq-100\", tickValue: 0.50, pointValue: 2, ticksPerPoint: 4, defaultCommission: 1.35 },\n            ES: { name: \"E-mini S&P 500\", tickValue: 12.50, pointValue: 50, ticksPerPoint: 4, defaultCommission: 2.50 },\n            MES: { name: \"Micro E-mini S&P 500\", tickValue: 1.25, pointValue: 5, ticksPerPoint: 4, defaultCommission: 1.35 },\n            NQ: { name: \"E-mini Nasdaq-100\", tickValue: 5.00, pointValue: 20, ticksPerPoint: 4, defaultCommission: 2.50 },\n            YM: { name: \"E-mini Dow\", tickValue: 5.00, pointValue: 5, ticksPerPoint: 1, defaultCommission: 2.50 },\n            MYM: { name: \"Micro E-mini Dow\", tickValue: 0.50, pointValue: 0.50, ticksPerPoint: 1, defaultCommission: 1.35 },\n            RTY: { name: \"E-mini Russell 2000\", tickValue: 5.00, pointValue: 50, ticksPerPoint: 10, defaultCommission: 2.50 },\n            M2K: { name: \"Micro E-mini Russell 2000\", tickValue: 0.50, pointValue: 5, ticksPerPoint: 10, defaultCommission: 1.35 },\n            CL: { name: \"Crude Oil\", tickValue: 10.00, pointValue: 1000, ticksPerPoint: 100, defaultCommission: 2.50 },\n            MCL: { name: \"Micro Crude Oil\", tickValue: 1.00, pointValue: 100, ticksPerPoint: 100, defaultCommission: 1.35 },\n            GC: { name: \"Gold\", tickValue: 10.00, pointValue: 100, ticksPerPoint: 10, defaultCommission: 2.50 },\n            MGC: { name: \"Micro Gold\", tickValue: 1.00, pointValue: 10, ticksPerPoint: 10, defaultCommission: 1.35 }\n        } as Contracts,\n        \n        // Prop firm presets\n        propFirmTargets: {\n            custom: { target: 6000, dailyLimit: 1100, maxDrawdown: 2000 },\n            topstep_50k: { target: 3000, dailyLimit: 1100, maxDrawdown: 2000 },\n            topstep_100k: { target: 6000, dailyLimit: 2200, maxDrawdown: 3000 },\n            topstep_150k: { target: 9000, dailyLimit: 3300, maxDrawdown: 4500 },\n            elite_25k: { target: 1500, dailyLimit: 500, maxDrawdown: 1500 },\n            elite_50k: { target: 2750, dailyLimit: 1100, maxDrawdown: 2500 },\n            elite_100k: { target: 6000, dailyLimit: 2200, maxDrawdown: 3000 },\n            elite_150k: { target: 9000, dailyLimit: 3300, maxDrawdown: 4500 },\n            takeprofit_25k: { target: 1500, dailyLimit: 500, maxDrawdown: 1500 },\n            takeprofit_50k: { target: 3000, dailyLimit: 1100, maxDrawdown: 2000 },\n            takeprofit_100k: { target: 6000, dailyLimit: 2200, maxDrawdown: 3000 },\n            mff_25k: { target: 1250, dailyLimit: 375, maxDrawdown: 1500 },\n            mff_50k: { target: 2500, dailyLimit: 1100, maxDrawdown: 2500 },\n            mff_100k: { target: 5000, dailyLimit: 2200, maxDrawdown: 4000 },\n            mff_150k: { target: 7500, dailyLimit: 3300, maxDrawdown: 6000 },\n            bluesky_25k: { target: 1500, dailyLimit: 500, maxDrawdown: 1500 },\n            bluesky_50k: { target: 3000, dailyLimit: 1100, maxDrawdown: 2500 },\n            bluesky_100k: { target: 6250, dailyLimit: 2200, maxDrawdown: 5000 }\n        } as PropFirmTargets,\n        \n        // User inputs\n        selectedContract: 'MNQ' as ContractSymbol,\n        selectedPropFirm: 'custom' as PropFirmType,\n        winningTrades: 2,\n        losingTrades: 2,\n        ticksGained: 120,\n        ticksLost: 68,\n        numContracts: 1,\n        numAccounts: 1,\n        commissionPerRT: 1.35,\n        eaProfitTarget: 6000,\n        eaDailyLimit: 1100,\n        eaMaxDrawdown: 2000,\n        tradingDaysPerMonth: 21,\n        customDays: 235,\n        converterTicks: 0,\n        converterPoints: 0,\n        \n        // Target simulation\n        useTargetSimulation: false,\n        target1Contracts: 0,\n        target1Points: 10,\n        target2Contracts: 0,\n        target2Points: 20,\n        target3Contracts: 0,\n        target3Points: 40,\n        \n        // Breakeven simulation\n        useBreakevenStop: false,\n        breakevenTriggerPoints: 10,\n        breakevenWinRate: 0.30,\n        \n        // Sharing\n        showShareModal: false,\n        shareURL: '',\n        copied: false,\n        \n        // UI preferences\n        showDetailedView: false,\n        \n        // Initialize\n        init(this: RiskCalculatorComponent & { $watch: Function }): void {\n            // Ensure modal is closed on init\n            this.showShareModal = false;\n            this.copied = false;\n            \n            this.commissionPerRT = this.contracts[this.selectedContract].defaultCommission;\n            this.$watch('selectedContract', (value: ContractSymbol) => {\n                this.commissionPerRT = this.contracts[value].defaultCommission;\n            });\n            \n            // Load from URL if parameters exist\n            this.loadFromURL();\n        },\n        \n        // Update prop firm target\n        updatePropFirmTarget(): void {\n            if (this.selectedPropFirm !== 'custom') {\n                const propFirm = this.propFirmTargets[this.selectedPropFirm];\n                this.eaProfitTarget = propFirm.target;\n                this.eaDailyLimit = propFirm.dailyLimit;\n                this.eaMaxDrawdown = propFirm.maxDrawdown;\n            }\n        },\n        \n        // Basic calculated properties\n        get totalTrades(): number {\n            return this.winningTrades + this.losingTrades;\n        },\n        \n        get winLossPercent(): number {\n            return this.totalTrades > 0 ? Math.round((this.winningTrades / this.totalTrades) * 100) : 0;\n        },\n        \n        get winRate(): number {\n            return this.totalTrades > 0 ? this.winningTrades / this.totalTrades : 0;\n        },\n        \n        get contract(): FuturesContract {\n            return this.contracts[this.selectedContract];\n        },\n        \n        // Amount calculations\n        get avgWinAmount(): number {\n            const effectiveTicks = this.useTargetSimulation ? this.avgExitTicks : this.ticksGained;\n            return effectiveTicks * this.contract.tickValue * this.numContracts;\n        },\n        \n        get avgLossAmount(): number {\n            return this.ticksLost * this.contract.tickValue * this.numContracts;\n        },\n        \n        get maxTradeLoss(): number {\n            return this.avgLossAmount;\n        },\n        \n        get maxTradeGain(): number {\n            return this.avgWinAmount;\n        },\n        \n        // R:R calculations\n        get rValue(): number {\n            const effectiveTicks = this.useTargetSimulation ? this.avgExitTicks : this.ticksGained;\n            return this.ticksLost > 0 ? effectiveTicks / this.ticksLost : 0;\n        },\n        \n        get rRatio(): string {\n            return this.rValue.toFixed(2);\n        },\n        \n        // Expectancy calculation (accounts for win rate)\n        get expectancy(): number {\n            const winAmount = this.avgWinAmount - (this.commissionPerRT * this.numContracts);\n            const lossAmount = this.avgLossAmount + (this.commissionPerRT * this.numContracts);\n            const lossRate = 1 - this.winRate;\n            \n            return (this.winRate * winAmount) - (lossRate * lossAmount);\n        },\n        \n        get expectancyR(): number {\n            if (this.avgLossAmount === 0) return 0;\n            return this.expectancy / this.avgLossAmount;\n        },\n        \n        get expectancyPercent(): number {\n            if (this.avgLossAmount === 0) return 0;\n            return (this.expectancy / this.avgLossAmount) * 100;\n        },\n        \n        // Breakeven adjusted calculations\n        get breakevenAdjustedWinRate(): number {\n            if (!this.useBreakevenStop) return this.winRate;\n            \n            // Calculate percentage of trades reaching BE based on trigger points\n            // The further the BE trigger, the fewer trades reach it\n            const percentReachingBE = this.calculateBreakevenReachRate();\n            \n            const tradesReachingBE = this.winRate * percentReachingBE;\n            const tradesNotReachingBE = this.winRate * (1 - percentReachingBE);\n            const actualWins = tradesNotReachingBE + (tradesReachingBE * this.breakevenWinRate);\n            \n            return actualWins;\n        },\n        \n        get breakevenScratchRate(): number {\n            if (!this.useBreakevenStop) return 0;\n            \n            const percentReachingBE = this.calculateBreakevenReachRate();\n            const tradesReachingBE = this.winRate * percentReachingBE;\n            return tradesReachingBE * (1 - this.breakevenWinRate);\n        },\n        \n        // Calculate what percentage of winning trades reach the breakeven trigger\n        calculateBreakevenReachRate(): number {\n            // Convert trigger points to ticks for comparison\n            const triggerTicks = this.breakevenTriggerPoints * this.contract.ticksPerPoint;\n            const avgWinTicks = this.useTargetSimulation ? this.avgExitTicks : this.ticksGained;\n            \n            // If trigger is beyond average win, very few trades reach it\n            if (triggerTicks >= avgWinTicks) {\n                return 0.1; // Only 10% reach BE if trigger is at or beyond target\n            }\n            \n            // Calculate reach rate based on trigger distance\n            // The closer the trigger to entry (0), the more trades reach it\n            const reachRate = 1 - (triggerTicks / avgWinTicks);\n            \n            // Clamp between 0.1 and 0.95\n            return Math.max(0.1, Math.min(0.95, reachRate));\n        },\n        \n        get breakevenAdjustedExpectancy(): number {\n            if (!this.useBreakevenStop) return this.expectancy;\n            \n            const winAmount = this.avgWinAmount - (this.commissionPerRT * this.numContracts);\n            const lossAmount = this.avgLossAmount + (this.commissionPerRT * this.numContracts);\n            const scratchAmount = -(this.commissionPerRT * this.numContracts);\n            \n            const actualWinRate = this.breakevenAdjustedWinRate;\n            const scratchRate = this.breakevenScratchRate;\n            const lossRate = 1 - actualWinRate - scratchRate;\n            \n            return (actualWinRate * winAmount) + (scratchRate * scratchAmount) - (lossRate * lossAmount);\n        },\n        \n        // P&L calculations\n        get grossDailyGain(): number {\n            if (!this.useBreakevenStop) {\n                const totalWinAmount = this.avgWinAmount * this.winningTrades;\n                const totalLossAmount = this.avgLossAmount * this.losingTrades;\n                return totalWinAmount - totalLossAmount;\n            }\n            \n            // When using breakeven stops, calculate based on adjusted rates\n            const actualWins = this.breakevenAdjustedWinRate * this.totalTrades;\n            const actualLosses = (1 - this.breakevenAdjustedWinRate - this.breakevenScratchRate) * this.totalTrades;\n            \n            const totalWinAmount = this.avgWinAmount * actualWins;\n            const totalLossAmount = this.avgLossAmount * actualLosses;\n            return totalWinAmount - totalLossAmount;\n        },\n        \n        get totalCommissions(): number {\n            return this.commissionPerRT * this.totalTrades * this.numContracts * this.numAccounts;\n        },\n        \n        get netDailyGain(): number {\n            if (!this.useBreakevenStop) {\n                return this.grossDailyGain - (this.commissionPerRT * this.totalTrades * this.numContracts);\n            }\n            \n            // Use breakeven-adjusted expectancy * total trades for more accurate calculation\n            return this.breakevenAdjustedExpectancy * this.totalTrades;\n        },\n        \n        get grossDailyGainTotal(): number {\n            return this.grossDailyGain * this.numAccounts;\n        },\n        \n        get netDailyGainTotal(): number {\n            return this.netDailyGain * this.numAccounts;\n        },\n        \n        get daysToEATarget(): number {\n            return this.netDailyGain > 0 ? this.eaProfitTarget / this.netDailyGain : 0;\n        },\n        \n        get daysToEATargetAllAccounts(): number {\n            return this.netDailyGainTotal > 0 ? this.eaProfitTarget / this.netDailyGainTotal : 0;\n        },\n        \n        // Target simulation calculations\n        get totalTargetContracts(): number {\n            return this.target1Contracts + this.target2Contracts + this.target3Contracts;\n        },\n        \n        get avgExitPoints(): number {\n            if (!this.useTargetSimulation) {\n                return this.ticksGained / this.contract.ticksPerPoint;\n            }\n            \n            const actualContracts = Math.min(this.totalTargetContracts, this.numContracts);\n            if (actualContracts === 0) {\n                return this.ticksGained / this.contract.ticksPerPoint;\n            }\n            \n            let totalPoints = 0;\n            let contractsUsed = 0;\n            \n            if (this.target1Contracts > 0 && contractsUsed < this.numContracts) {\n                const contracts = Math.min(this.target1Contracts, this.numContracts - contractsUsed);\n                totalPoints += contracts * this.target1Points;\n                contractsUsed += contracts;\n            }\n            \n            if (this.target2Contracts > 0 && contractsUsed < this.numContracts) {\n                const contracts = Math.min(this.target2Contracts, this.numContracts - contractsUsed);\n                totalPoints += contracts * this.target2Points;\n                contractsUsed += contracts;\n            }\n            \n            if (this.target3Contracts > 0 && contractsUsed < this.numContracts) {\n                const contracts = Math.min(this.target3Contracts, this.numContracts - contractsUsed);\n                totalPoints += contracts * this.target3Points;\n                contractsUsed += contracts;\n            }\n            \n            return contractsUsed > 0 ? totalPoints / contractsUsed : this.ticksGained / this.contract.ticksPerPoint;\n        },\n        \n        get avgExitTicks(): number {\n            return this.avgExitPoints * this.contract.ticksPerPoint;\n        },\n        \n        get blendedRR(): number {\n            return this.ticksLost > 0 ? this.avgExitTicks / this.ticksLost : 0;\n        },\n        \n        // Risk Analysis calculations\n        get maxConsecutiveLosses(): number {\n            // Based on win rate, calculate probable consecutive losses\n            const lossRate = 1 - this.winRate;\n            if (lossRate <= 0) return 0;\n            \n            // 99% confidence level for consecutive losses\n            return Math.ceil(Math.log(0.01) / Math.log(lossRate));\n        },\n        \n        get maxDrawdownFromLosses(): number {\n            const drawdownPerAccount = this.maxConsecutiveLosses * this.maxTradeLoss;\n            const totalDrawdown = drawdownPerAccount * this.numAccounts;\n            \n            // Cap at daily limit if applicable\n            if (this.eaDailyLimit > 0) {\n                return Math.min(totalDrawdown, this.eaDailyLimit);\n            }\n            \n            return totalDrawdown;\n        },\n        \n        get tradesToDailyLimit(): number {\n            if (this.eaDailyLimit <= 0 || this.maxTradeLoss <= 0) return Infinity;\n            return Math.floor(this.eaDailyLimit / (this.maxTradeLoss + (this.commissionPerRT * this.numContracts)));\n        },\n        \n        get daysToBlowAccount(): number {\n            if (this.netDailyGainTotal >= 0) return Infinity;\n            \n            const dailyLoss = Math.abs(this.netDailyGainTotal);\n            return this.eaMaxDrawdown / dailyLoss;\n        },\n        \n        get riskOfRuin(): number {\n            // Risk of ruin calculation for prop firm account\n            if (this.winRate === 0 || this.rValue <= 0) return 1;\n            \n            const q = 1 - this.winRate;\n            const p = this.winRate;\n            const b = this.rValue;\n            \n            // Negative expectancy = certain ruin\n            if (this.expectancy <= 0) return 1;\n            \n            // Calculate based on number of losing trades to hit drawdown\n            const totalRisk = this.maxTradeLoss * this.numAccounts;\n            const tradesToRuin = Math.floor(this.eaMaxDrawdown / totalRisk);\n            \n            if (tradesToRuin <= 0) return 1;\n            \n            // Using the gambler's ruin formula\n            // When p*b > q (positive expectancy)\n            const ratio = q / (p * b);\n            if (ratio >= 1) return 1;\n            \n            const riskOfRuin = Math.pow(ratio, tradesToRuin);\n            \n            return Math.min(1, Math.max(0, riskOfRuin));\n        },\n        \n        get recommendedMaxContracts(): number {\n            // Based on 1% risk per trade of max drawdown\n            const onePercentRisk = this.eaMaxDrawdown * 0.01;\n            const maxLossPerContract = (this.ticksLost * this.contract.tickValue) + (2 * this.commissionPerRT); // Round trip commission\n            \n            return Math.max(1, Math.floor(onePercentRisk / maxLossPerContract));\n        },\n        \n        get isOversized(): boolean {\n            return this.numContracts > this.recommendedMaxContracts;\n        },\n        \n        // Setup target presets\n        setupTargets(style: 'conservative' | 'moderate' | 'aggressive'): void {\n            const total = this.numContracts;\n            if (total === 0) return;\n            \n            switch(style) {\n                case 'conservative':\n                    this.target1Contracts = Math.ceil(total * 0.6);\n                    this.target2Contracts = Math.floor(total * 0.3);\n                    this.target3Contracts = total - this.target1Contracts - this.target2Contracts;\n                    this.target1Points = Math.round((this.ticksLost / this.contract.ticksPerPoint) * 1);\n                    this.target2Points = Math.round((this.ticksLost / this.contract.ticksPerPoint) * 2);\n                    this.target3Points = Math.round((this.ticksLost / this.contract.ticksPerPoint) * 3);\n                    break;\n                    \n                case 'moderate':\n                    this.target1Contracts = Math.ceil(total * 0.4);\n                    this.target2Contracts = Math.ceil(total * 0.4);\n                    this.target3Contracts = total - this.target1Contracts - this.target2Contracts;\n                    this.target1Points = Math.round((this.ticksLost / this.contract.ticksPerPoint) * 1.5);\n                    this.target2Points = Math.round((this.ticksLost / this.contract.ticksPerPoint) * 2.5);\n                    this.target3Points = Math.round((this.ticksLost / this.contract.ticksPerPoint) * 4);\n                    break;\n                    \n                case 'aggressive':\n                    this.target1Contracts = Math.ceil(total * 0.2);\n                    this.target2Contracts = Math.floor(total * 0.3);\n                    this.target3Contracts = total - this.target1Contracts - this.target2Contracts;\n                    this.target1Points = Math.round((this.ticksLost / this.contract.ticksPerPoint) * 2);\n                    this.target2Points = Math.round((this.ticksLost / this.contract.ticksPerPoint) * 3);\n                    this.target3Points = Math.round((this.ticksLost / this.contract.ticksPerPoint) * 5);\n                    break;\n            }\n        },\n        \n        // URL Sharing functionality\n        shareAsURL(): void {\n            const params = new URLSearchParams({\n                c: this.selectedContract,\n                wt: this.winningTrades.toString(),\n                lt: this.losingTrades.toString(),\n                tg: this.ticksGained.toString(),\n                tl: this.ticksLost.toString(),\n                nc: this.numContracts.toString(),\n                na: this.numAccounts.toString(),\n                cr: this.commissionPerRT.toString(),\n                pf: this.selectedPropFirm,\n                pt: this.eaProfitTarget.toString(),\n                cd: this.customDays.toString(),\n                ts: this.useTargetSimulation ? '1' : '0',\n                t1c: this.target1Contracts.toString(),\n                t1p: this.target1Points.toString(),\n                t2c: this.target2Contracts.toString(),\n                t2p: this.target2Points.toString(),\n                t3c: this.target3Contracts.toString(),\n                t3p: this.target3Points.toString(),\n                bes: this.useBreakevenStop ? '1' : '0',\n                btp: this.breakevenTriggerPoints.toString(),\n                bwr: this.breakevenWinRate.toString(),\n                dv: this.showDetailedView ? '1' : '0'\n            });\n            \n            this.shareURL = window.location.origin + window.location.pathname + '?' + params.toString();\n            this.showShareModal = true;\n            this.copied = false;\n        },\n        \n        async copyShareURL(): Promise<void> {\n            try {\n                await navigator.clipboard.writeText(this.shareURL);\n                this.copied = true;\n                setTimeout(() => { this.copied = false; }, 2000);\n            } catch (error) {\n                console.error('Failed to copy URL:', error);\n            }\n        },\n        \n        loadFromURL(): void {\n            const params = new URLSearchParams(window.location.search);\n            \n            if (params.has('c')) {\n                this.selectedContract = (params.get('c') || 'MNQ') as ContractSymbol;\n                this.winningTrades = parseInt(params.get('wt') || '2');\n                this.losingTrades = parseInt(params.get('lt') || '2');\n                this.ticksGained = parseInt(params.get('tg') || '120');\n                this.ticksLost = parseInt(params.get('tl') || '68');\n                this.numContracts = parseInt(params.get('nc') || '1');\n                this.numAccounts = parseInt(params.get('na') || '1');\n                this.commissionPerRT = parseFloat(params.get('cr') || this.contracts[this.selectedContract].defaultCommission.toString());\n                this.selectedPropFirm = (params.get('pf') || 'custom') as PropFirmType;\n                this.eaProfitTarget = parseInt(params.get('pt') || '6000');\n                this.customDays = parseInt(params.get('cd') || '235');\n                \n                this.useTargetSimulation = params.get('ts') === '1';\n                this.target1Contracts = parseInt(params.get('t1c') || '0');\n                this.target1Points = parseInt(params.get('t1p') || '10');\n                this.target2Contracts = parseInt(params.get('t2c') || '0');\n                this.target2Points = parseInt(params.get('t2p') || '20');\n                this.target3Contracts = parseInt(params.get('t3c') || '0');\n                this.target3Points = parseInt(params.get('t3p') || '40');\n                \n                this.useBreakevenStop = params.get('bes') === '1';\n                this.breakevenTriggerPoints = parseInt(params.get('btp') || '10');\n                this.breakevenWinRate = parseFloat(params.get('bwr') || '0.30');\n                \n                this.showDetailedView = params.get('dv') === '1';\n            }\n        },\n        \n        // Save as image functionality\n        async saveAsImage(): Promise<void> {\n            const button = (event?.target as HTMLElement)?.closest('button');\n            if (!button) return;\n            \n            const originalText = button.innerHTML;\n            button.innerHTML = 'Generating...';\n            button.disabled = true;\n            \n            const allButtons = document.querySelectorAll('button');\n            \n            try {\n                allButtons.forEach((btn: Element) => (btn as HTMLElement).style.display = 'none');\n                \n                const element = document.querySelector('.max-w-7xl');\n                if (!element) throw new Error('Content element not found');\n                \n                const isDarkMode = document.documentElement.classList.contains('dark');\n                const canvas = await html2canvas(element, {\n                    backgroundColor: isDarkMode ? '#111827' : '#f3f4f6',\n                    scale: 2,\n                    logging: false,\n                    useCORS: true,\n                    allowTaint: true,\n                    onclone: (clonedDoc: Document) => {\n                        if (isDarkMode) {\n                            clonedDoc.documentElement.classList.add('dark');\n                            const clonedElement = clonedDoc.querySelector('.max-w-7xl') as HTMLElement;\n                            if (clonedElement) {\n                                clonedElement.style.backgroundColor = '#111827';\n                                clonedElement.style.color = '#f3f4f6';\n                            }\n                        }\n                    }\n                });\n                \n                allButtons.forEach((btn: Element) => (btn as HTMLElement).style.display = '');\n                \n                // Add watermark\n                const ctx = canvas.getContext('2d');\n                if (ctx) {\n                    ctx.font = '14px Arial';\n                    ctx.fillStyle = 'rgba(0, 169, 232, 0.6)';\n                    ctx.textAlign = 'right';\n                    ctx.fillText('Created with ProfitPath by ProfitPros', canvas.width - 20, canvas.height - 20);\n                }\n\n                const link = document.createElement('a');\n                link.download = `profitpath-${this.selectedContract}-${new Date().toISOString().split('T')[0]}.png`;\n                link.href = canvas.toDataURL();\n                link.click();\n                \n                button.innerHTML = originalText;\n                button.disabled = false;\n            } catch (error) {\n                console.error('Error saving image:', error);\n                alert('Error saving image. Please try again.');\n                button.innerHTML = originalText;\n                button.disabled = false;\n                allButtons.forEach((btn: Element) => (btn as HTMLElement).style.display = '');\n            }\n        }\n    };\n    \n    return component;\n}\n\n// Export for use in browser\nexport { riskCalculator };\n(window as any).riskCalculator = riskCalculator;"],
  "mappings": "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",
  "names": ["index_exports", "__export", "BREAKEVEN_CONFIG", "DEFAULT_VALUES", "FUTURES_CONTRACTS", "PROP_FIRM_TARGETS", "TARGET_PRESETS", "URL_PARAMS", "calculateBreakevenAdjustedWinRate", "calculateDaysToTarget", "calculateExpectancy", "calculateRValue", "calculateTickValue", "calculateWeightedAverageExit", "formatCurrency", "formatPercentage", "pointsToTicks", "riskCalculator", "ticksToPoints", "validateTradingInputs", "FUTURES_CONTRACTS", "PROP_FIRM_TARGETS", "DEFAULT_VALUES", "TARGET_PRESETS", "BREAKEVEN_CONFIG", "URL_PARAMS", "calculateTickValue", "ticks", "contract", "numContracts", "pointsToTicks", "points", "ticksToPoints", "calculateExpectancy", "winRate", "avgWinAmount", "avgLossAmount", "commissionPerRT", "winAmount", "lossAmount", "lossRate", "calculateRValue", "avgWinTicks", "avgLossTicks", "calculateBreakevenAdjustedWinRate", "baseWinRate", "breakevenWinRate", "percentReachingBE", "tradesReachingBE", "calculateWeightedAverageExit", "targets", "totalContracts", "totalPoints", "contractsUsed", "target", "contracts", "calculateDaysToTarget", "targetAmount", "dailyProfit", "formatCurrency", "amount", "formatPercentage", "value", "decimals", "validateTradingInputs", "inputs", "errors", "riskCalculator", "value", "propFirm", "effectiveTicks", "winAmount", "lossAmount", "lossRate", "percentReachingBE", "tradesReachingBE", "triggerTicks", "avgWinTicks", "reachRate", "scratchAmount", "actualWinRate", "scratchRate", "totalWinAmount", "totalLossAmount", "actualWins", "actualLosses", "totalPoints", "contractsUsed", "contracts", "totalDrawdown", "dailyLoss", "q", "p", "b", "totalRisk", "tradesToRuin", "ratio", "riskOfRuin", "onePercentRisk", "maxLossPerContract", "style", "total", "params", "error", "button", "originalText", "allButtons", "btn", "element", "isDarkMode", "canvas", "clonedDoc", "clonedElement", "ctx", "link", "riskCalculator", "riskCalculator"]
}
